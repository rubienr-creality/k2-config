# F008
# CreateDate: 2023/03/21

[gcode_macro PRINTER_PARAM]
variable_z_safe_pause: 0.0
variable_z_safe_g28: 3.0
variable_max_x_position: 350.0
variable_max_y_position: 350.0
variable_max_z_position: 350.0
variable_fans: 3
variable_auto_g29: 0
variable_fan0_min: 25
variable_fan1_min: 50
variable_fan2_min: 100
variable_fan2_speed: 0
variable_fan0_speed: 0
variable_hotend_temp: 0
variable_e_min_current: 0.27
variable_bed_steady_temp: 60,80
variable_bed_steady_time: 60,120
gcode:

[gcode_macro MAINTENANCE_ITEM_PARAM]
variable_cut_calibration: 10000    # 次数
variable_shaper_calibrate: 1800000  # 秒 500小时
variable_belt_tensioning: 3600000  # 秒 1000小时
variable_motion_mechanism_lubrication: 1800000  # 秒
variable_camera_maintenance: 1800000  # 秒
variable_fan_inspection: 1800000  # 秒
variable_nozzle: 20000  # 克
variable_cut: 100000  # 次
variable_machine_teflon_tube: 3600000  # 秒
variable_wipe_mouth_strip: 1800000  # 秒
variable_air_filter: 1800000  # 秒
variable_cfs_teflon_tube: 3600000  # 秒
variable_cfs_desiccant: 1800000  # 秒
gcode:

[gcode_macro MAINTENANCE_ITEM]
gcode:

[gcode_macro AUTOTUNE_SHAPERS]
variable_autotune_shapers: 'zv','mzv','ei'
gcode:

[gcode_macro IF_NEED_HOME]
gcode:
  {% set x_axes = printer.toolhead.homed_axes %}
  {% if x_axes is defined and x_axes[0] is defined %}
    {action_respond_info(
        "x_axes: %s \n"
        % (x_axes))}
  {% else %}
    G28
  {% endif %}

[gcode_macro LOAD_MATERIAL_CLOSE_FAN2]
variable_fan2_value: 0
gcode:
  SAVE_GCODE_STATE NAME=myMoveState
  {% if printer['output_pin fan2'].value > 0.0 %}
    SET_GCODE_VARIABLE MACRO=LOAD_MATERIAL_CLOSE_FAN2 VARIABLE=fan2_value VALUE={printer['output_pin fan2'].value}
    M107 P2
  {% endif %}
  
[gcode_macro LOAD_MATERIAL_RESTORE_FAN2]
gcode:
  {% set fan2_value = printer['gcode_macro LOAD_MATERIAL_CLOSE_FAN2'].fan2_value|float %}
  RESTORE_GCODE_STATE NAME=myMoveState
  {% if fan2_value > 0.0 %}
    {% set s_value = (fan2_value * 255 - printer["gcode_macro PRINTER_PARAM"].fan2_min) * 255 / (255 - printer["gcode_macro PRINTER_PARAM"].fan2_min) %}
    M106 P2 S{s_value}
    SET_GCODE_VARIABLE MACRO=LOAD_MATERIAL_CLOSE_FAN2 VARIABLE=fan2_value VALUE=0
  {% endif %}
  # SET_E_MIN_CURRENT
  # BOX_GO_TO_EXTRUDE_POS#M1500

[gcode_macro SET_E_MIN_CURRENT]
gcode:
  # {% set e_current = printer['gcode_macro PRINTER_PARAM'].e_min_current %}
  # M400
  # SET_TMC_CURRENT STEPPER=extruder CURRENT={e_current} HOLDCURRENT={e_current}
  # G4 P2000

[gcode_macro RESTORE_E_CURRENT]
gcode:
  # {% set e_current = printer.configfile.settings['tmc2209 extruder'].run_current %}
  # M400
  # SET_TMC_CURRENT STEPPER=extruder CURRENT={e_current} HOLDCURRENT={e_current}
  # G4 P2000

[gcode_macro LOAD_MATERIAL]
gcode: 
  # LOAD_MATERIAL_CLOSE_FAN2
  # IF_NEED_HOME
  # SET_PIN PIN=fan0 VALUE=0
  # BOX_GO_TO_EXTRUDE_POS#M1500
  # M104 S220
  # M109 S{printer.custom_macro.default_extruder_temp}
  # G91
  # G1 X0.5 F600
  # G92 E0 ; Reset Extruder
  # G1 E100 F600
  # G1 E-0.5 F600
  # G90
  # SET_PIN PIN=fan0 VALUE=255
  # G4 P3000
  # SET_PIN PIN=fan0 VALUE=0
  # BOX_NOZZLE_CLEAN#M1501
  # M104 S140
  # # BOX_GO_TO_EXTRUDE_POS#M1500
  # # BOX_NOZZLE_CLEAN
  # # G1 Y200 F6000
  # G92 E0 ; Reset Extruder
  # G90 
  # LOAD_MATERIAL_RESTORE_FAN2
  SAVE_GCODE_STATE NAME=myMoveState
  BOX_GO_TO_EXTRUDE_POS
  FILAMENT_RACK_SAVE_FAN
  FILAMENT_RACK_PRE_FLUSH
  FILAMENT_RACK_SET_TEMP
  FILAMENT_RACK_FLUSH
  FILAMENT_RACK_RESTORE_FAN
  SET_COOL_TEMP
  BOX_MOVE_TO_SAFE_POS
  RESTORE_GCODE_STATE NAME=myMoveState

[gcode_macro QUIT_MATERIAL]
gcode:
  SAVE_GCODE_STATE NAME=myMoveState
  # IF_NEED_HOME
  # BOX_CUT_MATERIAL#M1502
  # M109 S{printer.custom_macro.default_extruder_temp}
  # G91
  # G1 E-60 F2000
  # G90
  # G1 Y200 F6000
  BOX_GO_TO_EXTRUDE_POS
  FILAMENT_RACK_SET_TEMP
  BOX_MOVE_TO_CUT
  M400
  G91
  G0 E-10 F360
  G90
  M400
  BOX_MOVE_TO_SAFE_POS
  SET_COOL_TEMP
  RESTORE_GCODE_STATE NAME=myMoveState

[gcode_macro Qmode]
variable_flag: 0
variable_accel: 0
variable_accel_to_decel: 0
variable_velocity: 0
variable_square_corner_velocity: 0
variable_pressure_advance:0.0
variable_fan0_value: 0.00
variable_fan1_value: 0.00
variable_fan2_value: 0.00
variable_speed_factor: 0
variable_max_accel: 2500
variable_max_accel_to_decel: 2500
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% if printer['gcode_macro Qmode'].flag|int == 0 %}
    {% if printer_state == "printing" or printer_state == "paused" %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=accel VALUE={printer.toolhead.max_accel}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=velocity VALUE={printer.toolhead.max_velocity}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=square_corner_velocity VALUE={printer.toolhead.square_corner_velocity}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=pressure_advance VALUE={printer.extruder.pressure_advance}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=speed_factor VALUE={printer.gcode_move.speed_factor}

    #   SET_TMC_FIELD STEPPER=stepper_x FIELD=en_spreadcycle VALUE=0
    #   SET_TMC_FIELD STEPPER=stepper_y FIELD=en_spreadcycle VALUE=0
    #   SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.0
    #   SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.0
    #   G4 P1000

      # Set Motion Parameters
      SET_VELOCITY_LIMIT ACCEL=2500
      SET_VELOCITY_LIMIT ACCEL_TO_DECEL=2500
      SET_VELOCITY_LIMIT VELOCITY=150
      SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5
      SET_PRESSURE_ADVANCE ADVANCE=0.05
      M220 S50

      {% set tmp = printer['output_pin fan0'].value * 255 %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan0_value VALUE={tmp}
      {% if tmp - printer['gcode_macro PRINTER_PARAM'].fan0_min > (255 - printer['gcode_macro PRINTER_PARAM'].fan0_min) / 2 %}
        {% set tmp = printer['gcode_macro PRINTER_PARAM'].fan0_min + (255 - printer['gcode_macro PRINTER_PARAM'].fan0_min) / 2 %}
        SET_PIN PIN=fan0 VALUE={tmp}
      {% endif %}

      {% set tmp = printer['output_pin fan1'].value * 255 %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan1_value VALUE={printer['output_pin fan1'].value * 255}
      {% if tmp - printer['gcode_macro PRINTER_PARAM'].fan1_min > (255 - printer['gcode_macro PRINTER_PARAM'].fan1_min) / 2 %}
        {% set tmp = printer['gcode_macro PRINTER_PARAM'].fan1_min + (255 - printer['gcode_macro PRINTER_PARAM'].fan1_min) / 2 %}
        SET_PIN PIN=fan1 VALUE={tmp}
      {% endif %}

      {% set tmp = printer['output_pin fan2'].value * 255 %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan2_value VALUE={printer['output_pin fan2'].value * 255}
      {% if tmp - printer['gcode_macro PRINTER_PARAM'].fan2_min > (255 - printer['gcode_macro PRINTER_PARAM'].fan2_min) / 2 %}
        {% set tmp = printer['gcode_macro PRINTER_PARAM'].fan2_min + (255 - printer['gcode_macro PRINTER_PARAM'].fan2_min) / 2 %}
        SET_PIN PIN=fan2 VALUE={tmp}
      {% endif %}

      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=flag VALUE=1
      SET_QMODE_FLAG FLAG=1
    {% endif %}
  {% endif %}

[gcode_macro Qmode_exit]
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% if printer['gcode_macro Qmode'].flag|int == 1 %}
    {% if printer_state == "printing" or printer_state == "paused" %}
      SET_VELOCITY_LIMIT ACCEL={printer['gcode_macro Qmode'].accel}
      SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer['gcode_macro Qmode'].accel_to_decel}
      SET_VELOCITY_LIMIT VELOCITY={printer['gcode_macro Qmode'].velocity}
      SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer['gcode_macro Qmode'].square_corner_velocity}
      SET_PRESSURE_ADVANCE ADVANCE={printer['gcode_macro Qmode'].pressure_advance}
      M220 S{printer['gcode_macro Qmode'].speed_factor * 100}

    #   {% set X_RUN_CUR = printer.configfile.settings['tmc2209 stepper_x'].run_current %}
    #   {% set Y_RUN_CUR = printer.configfile.settings['tmc2209 stepper_y'].run_current %}
    #   SET_TMC_CURRENT STEPPER=stepper_x CURRENT={X_RUN_CUR}
    #   SET_TMC_CURRENT STEPPER=stepper_y CURRENT={Y_RUN_CUR}
    #   SET_TMC_FIELD STEPPER=stepper_x FIELD=en_spreadcycle VALUE=1
    #   SET_TMC_FIELD STEPPER=stepper_y FIELD=en_spreadcycle VALUE=1
    #   G4 P1000

      {% if printer['output_pin fan0'].value != 0 %}
        {action_respond_info("fan0_value = %s" % printer['gcode_macro Qmode'].fan0_value)}
        SET_PIN PIN=fan0 VALUE={printer['gcode_macro Qmode'].fan0_value}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan0_value VALUE=0
      {% endif %}
      {% if printer['output_pin fan1'].value != 0 %}
        {action_respond_info("fan1_value = %s" % printer['gcode_macro Qmode'].fan1_value)}
        SET_PIN PIN=fan1 VALUE={printer['gcode_macro Qmode'].fan1_value}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan1_value VALUE=0
      {% endif %}
      {% if printer['output_pin fan2'].value != 0 %}
        {action_respond_info("fan2_value = %s" % printer['gcode_macro Qmode'].fan2_value)}
        SET_PIN PIN=fan2 VALUE={printer['gcode_macro Qmode'].fan2_value}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan2_value VALUE=0
      {% endif %}

      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=flag VALUE=0
      SET_QMODE_FLAG FLAG=0
    {% endif %}
  {% endif %}

[gcode_macro M204]
rename_existing: M204.1
gcode:
  # {% if printer['gcode_macro Qmode'].flag|int == 0 %}
    {% set get_params = "" %}
    {% set qmode_max_accel = printer['gcode_macro Qmode'].max_accel|string %}
    {% if 'S' in params|upper %}
      {% if printer['gcode_macro Qmode'].flag|int == 1 and params.S|float > qmode_max_accel|float %}
        {% set get_params = (get_params + ' ' + 'S' + qmode_max_accel) %}
      {% else %}
        {% set get_params = (get_params + ' ' + 'S' + params.S) %}
      {% endif %}
    {% endif %}
    {% if 'P' in params|upper %}
      {% if printer['gcode_macro Qmode'].flag|int == 1 and params.P|float > qmode_max_accel|float %}
        {% set get_params = (get_params + ' ' + 'P' + qmode_max_accel) %}
      {% else %}
        {% set get_params = (get_params + ' ' + 'P' + params.P) %}
      {% endif %}
    {% endif %}
    {% if 'T' in params|upper %}
      {% if printer['gcode_macro Qmode'].flag|int == 1 and params.T|float > qmode_max_accel|float %}
        {% set get_params = (get_params + ' ' + 'T' + qmode_max_accel) %}
      {% else %}
        {% set get_params = (get_params + ' ' + 'T' + params.T) %}
      {% endif %}
    {% endif %}
    M204.1 {get_params}
  # {% endif %}

[gcode_macro M205]
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}

[gcode_macro M106]
gcode:
  {% set fans = printer["gcode_macro PRINTER_PARAM"].fans|int %}
  {% set fan = 0 %}
  {% set value = 0 %}
  {% if params.P is defined %}
    {% set tmp = params.P|int %}
    {% if tmp < fans %}
      {% set fan = tmp %}
    {% endif %}
  {% endif %}
  {% if params.S is defined %}
    {% set tmp = params.S|float %}
  {% else %}
    {% set tmp = 255 %}
  {% endif %}
  {% if tmp > 0 %}
    {% if fan == 0 %}
      {% set value = (255 - printer["gcode_macro PRINTER_PARAM"].fan0_min) / 255 * tmp %}
      {% if printer['gcode_macro Qmode'].flag | int == 1 %}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan0_value VALUE={printer["gcode_macro PRINTER_PARAM"].fan0_min + value}
        {% if value > (255 - printer['gcode_macro PRINTER_PARAM'].fan0_min) / 2  %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min + (255 - printer['gcode_macro PRINTER_PARAM'].fan0_min) / 2 %}
        {% else %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min + value %}
        {% endif %}
      {% else %}
        {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min + value %}
      {% endif %}
    {% endif %}
    {% if fan == 1 %}
      {% set value = (255 - printer["gcode_macro PRINTER_PARAM"].fan1_min) / 255 * tmp %}
      {% if printer['gcode_macro Qmode'].flag | int == 1 %}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan1_value VALUE={printer["gcode_macro PRINTER_PARAM"].fan1_min + value}
        {% if value > (255 - printer['gcode_macro PRINTER_PARAM'].fan1_min) / 2  %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan1_min + (255 - printer['gcode_macro PRINTER_PARAM'].fan1_min) / 2 %}
        {% else %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan1_min + value %}
        {% endif %}
      {% else %}
        {% set value = printer["gcode_macro PRINTER_PARAM"].fan1_min + value %}
      {% endif %}
    {% endif %}
    {% if fan == 2 %}
      {% set value = (255 - printer["gcode_macro PRINTER_PARAM"].fan2_min) / 255 * tmp %}
      {% if printer['gcode_macro Qmode'].flag | int == 1 %}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan2_value VALUE={printer["gcode_macro PRINTER_PARAM"].fan2_min + value}
        {% if value > (255 - printer['gcode_macro PRINTER_PARAM'].fan2_min) / 2  %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan2_min + (255 - printer['gcode_macro PRINTER_PARAM'].fan2_min) / 2 %}
        {% else %}
          {% set value = printer["gcode_macro PRINTER_PARAM"].fan2_min + value %}
        {% endif %}
      {% else %}
        {% set value = printer["gcode_macro PRINTER_PARAM"].fan2_min + value %}
      {% endif %}
    {% endif %}
  {% endif %}
  {% if value >= 255 %}
    {% set value = 255 %}
  {% endif %}
  SET_PIN PIN=fan{fan} VALUE={value}

[gcode_macro M107]
gcode:
  {% set fans = printer["gcode_macro PRINTER_PARAM"].fans|int %}
  {% if params.P is defined %}
    {% if params.P|int < fans %}
      SET_PIN PIN=fan{params.P|int} VALUE=0
    {% else %}
      SET_PIN PIN=fan0 VALUE=0
    {% endif %}
  {% else %}
    SET_PIN PIN=fan0 VALUE=0
    SET_PIN PIN=fan2 VALUE=0
  {% endif %}
# [gcode_macro M141 S0] #为了相应屏幕的关闭腔体加热模块   && 开始打印时候需要，腔体默认 35° 控温 M141 S35  && 结束打印 关闭腔体加热 M141 S0 
# gcode:
   #关闭腔体加热
   #关闭腔体加热风扇
   
[gcode_macro M141] #需要增加 M191 逻辑，现在要映射到M141 的逻辑
gcode:
  {% if 'S' in params|upper %}
    {% if printer["temperature_fan chamber_fan"].speed > 0.0 %}
      SET_PIN PIN=fan1 VALUE=255
    {% else %}
      SET_PIN PIN=fan1 VALUE=0
    {% endif %}
    {% if params.S|int > 40 %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=0
      SET_PIN PIN=fan1 VALUE=0
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={params.S}
    {% elif params.S|int > 0 %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={params.S|default(35)}
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0
    {% else %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=35
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0
      {% if params.S|int == 0 %}
        SET_PIN PIN=fan1 VALUE=0
      {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro M191]
gcode:
  {% if 'S' in params|upper %}
    {% if printer["temperature_fan chamber_fan"].speed > 0.0 %}
      SET_PIN PIN=fan1 VALUE=255
    {% else %}
      SET_PIN PIN=fan1 VALUE=0
    {% endif %}
    {% if params.S|int > 35 %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=0
      SET_PIN PIN=fan1 VALUE=0
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={params.S} WAIT=1
    {% elif params.S|int > 0 %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={params.S|default(35)}
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0  WAIT=1
    {% else %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=35
      SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0
      {% if params.S|int == 0 %}
        SET_PIN PIN=fan1 VALUE=0
      {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro CLEAR_NOZZLE_STEP1]
gcode:
    G90
    G1 X173.7 Y371.5 F4800
    G1 X152.8 Y371.5 F4800
    G1 X173.7 Y371.5 F4800
    G1 X173.7 Y371.5 F4800
    G1 X152.8 Y371.5 F4800
    G1 X173.7 Y371.5 F4800
    G1 X173.7 Y371.5 F4800
    G1 X152.8 Y371.5 F4800
    G1 X173.7 Y371.5 F4800
    G1 X173.7 Y371.5 F4800
    G1 X152.8 Y371.5 F4800
    G1 X173.7 Y371.5 F4800
    G1 X173.7 Y371.5 F4800
    G1 X152.8 Y371.5 F4800
    G1 X173.7 Y371.5 F4800
    G1 X173.7 Y350 F4800

[gcode_macro NEW_CLEAR_NOZZLE]
gcode:
    {% set bed_temp = printer.custom_macro.default_bed_temp %}
    {% set extruder_temp = printer.custom_macro.g28_ext_temp %}
    {% set nozzle_clear_temp = printer.custom_macro.default_extruder_temp %}
    BOX_GO_TO_EXTRUDE_POS#M1500
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
    # M109 S{nozzle_clear_temp}
    M104 S220
    M109 S220
    G91
    G1 E60 F300
    G1 E-8 F180
    SET_PIN PIN=fan0 VALUE=255
    G4 P3000
    # M109 S{nozzle_clear_temp-20}
    # CLEAR_NOZZLE_STEP1
    BOX_NOZZLE_CLEAN#M1501
    G90
    G1 Z0 F300
    # G1 X222   Y350 F600
    # G1 X170.7 Y350 F600
    M109 S{extruder_temp}
    SET_PIN PIN=fan0 VALUE=0
    G1 Z10 F300

[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[delayed_gcode wait_temp]
# initial_duration: 2.
gcode:
  {% set cur_temp = printer.extruder.temperature %}
  {% if cur_temp|int < 40 %}
    {action_respond_info("end_temp!\n")}
    WAIT_TEMP_END
  {% else %}
    {action_respond_info("cur_temp = %s \n" % (cur_temp))}
    UPDATE_DELAYED_GCODE ID=wait_temp DURATION=5
  {% endif %}

[gcode_macro WAIT_TEMP_START]
gcode:
  UPDATE_DELAYED_GCODE ID=wait_temp DURATION=1
  M106 P0 S255
 
[gcode_macro WAIT_TEMP_END]
gcode:
  UPDATE_DELAYED_GCODE ID=wait_temp DURATION=0
  M106 P0 S0

[gcode_macro PRINT_CALIBRATION]
# This part of the command is replaced by the application side without passing parameters
gcode:
  CX_PRINT_LEVELING_CALIBRATION

[gcode_macro FIRST_FLOOR_PAUSE_POSITION]
gcode:
  {% set extruder_temp = printer.custom_macro.g28_ext_temp %}
  M104 S{extruder_temp}
  {% set y_park = printer.toolhead.axis_maximum.y/2 %}
  {% set x_park = printer['gcode_macro PRINTER_PARAM'].max_x_position|float + 1 %}
  G90
  G1 Z2 F600
  G1 X{x_park} Y{y_park} F6000
  G1 Z0.2 F600

[gcode_macro ACCURATE_G28]
gcode:
  ACCURATE_HOME_Z


# PRINT_TEMP_SET EXTRUDER_TEMP=130 BED_TEMP=40 
# PRINT_TEMP_SET EXTRUDER_TEMP=130 BED_TEMP=40 WAIT_TEMP=1
[gcode_macro PRINT_TEMP_SET] 
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_WAITTEMP = (140.0|float)|int %}
  {% set WAIT_TEMP = params.WAIT_TEMP|default(0)|int %}
  M106 S0  #需要关闭模型风扇
  M140 S{BED_TEMP}
  M104 S{EXTRUDER_WAITTEMP}
  SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=5000
  {% if WAIT_TEMP|int == 1 %}
    M104 S{EXTRUDER_WAITTEMP}
    M190 S{BED_TEMP}
    M109 S{EXTRUDER_WAITTEMP}
  {% endif %}

[gcode_macro BOX_EXTRUDE_POS_SET] 
gcode:
  BOX_GO_TO_EXTRUDE_POS#M1500
  M190 S{params.BED_TEMP}
  BOX_NOZZLE_CLEAN#M1501

[gcode_macro ZDOWN_SWITCH_SET] 
gcode:
  ZDOWN_SWITCH ENABLE={params.VALUE} 


[gcode_macro START_PRINT]
variable_prepare: 0
gcode:
  BOX_START_PRINT
  G90
  SET_GCODE_OFFSET Z=0
  {% set g28_extruder_temp = printer.custom_macro.g28_ext_temp %}
  {% set bed_temp = printer.custom_macro.default_bed_temp %}
  {% set extruder_temp = printer.custom_macro.default_extruder_temp %}
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
  # {% set EXTRUDER_WAITTEMP = (EXTRUDER_TEMP/1.5|float)|int %}
  {% set EXTRUDER_WAITTEMP = (140.0|float)|int %}
  # {% set y_park = printer.toolhead.axis_maximum.y/2 %}
  {% if printer['gcode_macro START_PRINT'].prepare|int == 0 %}
    {action_respond_info("print prepared 111")}
    M106 S0  #需要关闭模型风扇
    M140 S{params.BED_TEMP}
    M104 S{EXTRUDER_WAITTEMP}
    # M204 S2000
    # SET_VELOCITY_LIMIT ACCEL_TO_DECEL=2000 #500 20240326
    SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=5000
    G28
    # 精擦嘴
    NOZZLE_CLEAR
    # BOX_GO_TO_EXTRUDE_POS#M1500
    M104 S{EXTRUDER_WAITTEMP}
    M190 S{params.BED_TEMP}
    M109 S{EXTRUDER_WAITTEMP}
    BOX_NOZZLE_CLEAN#M1501
    # Z_TILT_ADJUST
    # BOX_GO_TO_EXTRUDE_POS#M1500
    #M190 S{params.BED_TEMP}
    # BOX_NOZZLE_CLEAN#M1501
    # 精归零
    NEXT_HOMEZ_NACCU
    G28 Z
    # BED_MESH_CALIBRATE
    # CXSAVE_CONFIG
  {% else %}
    PRINT_PREPARE_CLEAR
  {% endif %}
  M104 S{params.EXTRUDER_TEMP}
  # G1 Z5 F600
  BOX_GO_TO_EXTRUDE_POS#M1500
  M109 S{params.EXTRUDER_TEMP} ;wait nozzle heating
  M140 S{params.BED_TEMP}
  M220 S100 ;Reset Feedrate
  # M221 S100 ;Reset Flowrate
  G21
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=10
  M204 S5000
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=5000
  # M83
  # G1 E120 F600
  # M106 S255
  # G4 P2000
  # M107
  BOX_NOZZLE_CLEAN#M1501
  # G1 X350 Y150 F12000
  # G1 Z0.2 F600
  # G1 X350 Y0 E15 F6000
  # G1 X200 Y0 E15 F6000
  # G1 Z5 F600
  G92 E0 ; Reset Extruder
  SET_PIN PIN=extruder_fan VALUE=1

[gcode_macro PRINT_PREPARED]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=prepare VALUE=1
  {action_respond_info("print prepared")}

[gcode_macro PRINT_PREPARE_CLEAR]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=prepare VALUE=0

[gcode_macro END_PRINT_POINT_WITHOUT_LIFTING]
gcode:
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    {% set max_z = printer["gcode_macro PRINTER_PARAM"].max_z_position|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-1.0 F180
      G1 E-{E} F4000
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if act_z < (max_z - 5) %}
      G1 Z2.0 F600
    {% endif %}
    G90
    {% set y_park = printer.toolhead.axis_maximum.y/2 %}
    {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
    G1 X{x_park} Y{y_park} F30000
  {% else %}
    {action_respond_info("end print xyz_axes is NULL\n")}
  {% endif %}

[gcode_macro END_PRINT_POINT]
gcode:
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    {% set max_z = printer["gcode_macro PRINTER_PARAM"].max_z_position|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set z_safe = 0.0 %}
    {% if act_z < (max_z / 2) %}
      {% set z_safe = (max_z / 2) - act_z %}
    {% elif act_z < max_z %}
      {% set z_safe = 2.0 %}
    {% endif %}
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-1.0 F180
      G1 E-{E} F4000
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {action_respond_info("END_PRINT_POINT act_z:%s, max_z:%s \n" % (act_z, max_z))}
    {% if act_z < (max_z - 5) %}
        {action_respond_info("END_PRINT_POINT G1 Z2.0 F600 \n")}
        G1 Z2.0 F600
    {% endif %}
    G90
    {% set y_park = printer.toolhead.axis_maximum.y/2 %}
    {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
    # G1 X{x_park} Y{y_park} F30000
    {% if z_safe > 2.0 %}
      G91
      {% set z_safe = z_safe - 2.0 %}
      G1 Z{z_safe} F600
      G90
    {% endif %}
  {% else %}
    {action_respond_info("end print xyz_axes is NULL\n")}
  {% endif %}

[gcode_macro END_PRINT]
gcode:
  RESTORE_LIMITS
  M400
  G92 E0
  BOX_END 
  BOX_END_PRINT
  Qmode_exit
  EXCLUDE_OBJECT_RESET
  PRINT_PREPARE_CLEAR
  M220 S100
  SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=5000
  TURN_OFF_HEATERS
  M107 P1
  M107 P2
  END_PRINT_POINT
  WAIT_TEMP_START
  M106 P0 S127
  M141 S0
  SET_PIN PIN=extruder_fan VALUE=0

[gcode_macro FIRST_FLOOR_PAUSE]
description: Pause the first floor print
# change this if you need more or less extrusion
variable_extrude: 2.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro FIRST_FLOOR_PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set y_park = printer.toolhead.axis_maximum.y/2 %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer["gcode_macro PRINTER_PARAM"].max_z_position|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_safe = 0.0 %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% elif act_z < max_z %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=z_safe_pause VALUE={z_safe|float}
  PAUSE_BASE
  G91
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-1.0 F180
      G1 E-{E} F300
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    G1 Z{z_safe} F600
    G90
    G1 X{x_park} Y{y_park} F30000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
  # save fan2 value and turn off fan2
  SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=fan2_speed VALUE={printer['output_pin fan2'].value}
  {% set fspeed = printer['gcode_macro PRINTER_PARAM'].fan2_speed %}
  {action_respond_info("fan2_value = %s \n" % (fspeed))}
  # SET_PIN PIN=fan2 VALUE=0
  M106 P2 S0
  M106 S0
  SET_E_MIN_CURRENT

[gcode_macro FIRST_FLOOR_RESUME]
description: Resume the first floor print
gcode:
  RESTORE_E_CURRENT
  {% if printer['gcode_macro PRINTER_PARAM'].fan2_speed > 0 %}
    # {% set fspeed = printer['gcode_macro PRINTER_PARAM'].fan2_speed %}
    # {action_respond_info("fan2_value2 = %s \n" % (fspeed))}
    # SET_PIN PIN=fan2 VALUE={(printer['gcode_macro PRINTER_PARAM'].fan2_speed * 255 + 0.5)|int}
    {% set s_value = (printer['gcode_macro PRINTER_PARAM'].fan2_speed * 255 - printer['gcode_macro PRINTER_PARAM'].fan2_min) * 255 / (255 - printer['gcode_macro PRINTER_PARAM'].fan2_min)|float %}
    M106 P2 S{s_value}
  {% endif %}
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro FIRST_FLOOR_PAUSE"].extrude|float + 1.0 %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  M400
  RESUME_BASE {get_params}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 2.0
gcode:
  {% if printer.pause_resume.is_paused|lower == 'false' %}
    PAUSE_BASE
    PAUSE_EXTERNAL
  {% endif %}

[gcode_macro PAUSE_EXTERNAL]
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set y_park = printer.toolhead.axis_maximum.y/2 %}
    {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer["gcode_macro PRINTER_PARAM"].max_z_position|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set z_safe = 0.0 %}
    {% if act_z < 48.0 %}
      {% set z_safe = 50.0 - act_z %}
    {% elif act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
    {% elif act_z < max_z %}
      {% set z_safe = max_z - act_z %}
    {% endif %}
    {action_respond_info("z_safe = %s"% (z_safe))}
    ##### end of definitions #####
    SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=z_safe_pause VALUE={z_safe|float}
    M400
    G91
    SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=hotend_temp VALUE={printer.extruder.target}
    M104 S140
    {% if "xyz" in printer.toolhead.homed_axes %}
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-1.0 F180
        G1 E-{E} F360
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}
      G1 Z{z_safe} F600
      M400
      G90
      #G1 X{x_park} Y{y_park} F30000
      BOX_GO_TO_EXTRUDE_POS  #暂停去料盒 rock_2023.03.26
      BOX_NOZZLE_CLEAN#M1501
      BOX_MOVE_TO_SAFE_POS
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}
    # save fan2 value and turn off fan2
    SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=fan2_speed VALUE={printer['output_pin fan2'].value}
    {% set fspeed = printer['output_pin fan2'].value %}
    {action_respond_info("fan2_value = %s \n" % (fspeed))}
    SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=fan0_speed VALUE={printer['output_pin fan0'].value}
    {% set fspeed = printer['output_pin fan0'].value %}
    {action_respond_info("fan0_value = %s \n" % (fspeed))}
    # SET_PIN PIN=fan2 VALUE=0
    # SET_PIN PIN=fan0 VALUE=0
    M106 P2 S0
    M106 P0 S0
    SET_E_MIN_CURRENT
    SET_PIN PIN=extruder_fan VALUE=0

[gcode_macro CALIBRATE_CUT_POS]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  SET_LIMITS
  MOTOR_CHECK_CUT_POS
  M400
  RESTORE_LIMITS

[gcode_macro INPUTSHAPER]
gcode:
  {% set enabled = printer["filament_switch_sensor filament_sensor"].enabled %}
  {% if enabled %}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  {% endif %}
  G90
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
  {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
  G1 X{POSITION_X} Y{POSITION_Y} F6000
  G1 Z10 F600
  SHAPER_CALIBRATE
  CXSAVE_CONFIG
  {% if enabled %}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  {% endif %}
  M400
  
[gcode_macro BELT_TENSION]
gcode:
  G90
  {% if "xy" not in printer.toolhead.homed_axes %}
    G28 X Y
  {% endif %}
  BED_MESH_CLEAR
  BOX_MOVE_TO_SAFE_POS
  M400
  M84
  {% if 'X' in params.AXES|upper %}
    BELT_MDL_INFO MDL_NAME=mdlx
    BELT_MDL_SET MDL_NAME=mdlx MDL_N=140
  {% elif 'Y' in params.AXES|upper %}
    BELT_MDL_INFO MDL_NAME=mdly
    BELT_MDL_SET MDL_NAME=mdly MDL_N=140
  {% else %}
    BELT_MDL_INFO MDL_NAME=mdlx
    BELT_MDL_SET MDL_NAME=mdlx MDL_N=140
    BELT_MDL_INFO MDL_NAME=mdly
    BELT_MDL_SET MDL_NAME=mdly MDL_N=140
  {% endif %}
  SET_MAINTENANCE_ITEM_VARIABLE NAME=calibrate VARIABLE=belt_tensioning VALUE=0

[gcode_macro BEDPID]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=100
  SAVE_CONFIG

[gcode_macro NOZZLE_PID]
gcode:
  SET_PIN PIN=fan0 VALUE=255
  PID_CALIBRATE HEATER=extruder TARGET=230
  SAVE_CONFIG
  SET_PIN PIN=fan0 VALUE=0

[gcode_macro NOZZLE_PID_HIGH]
gcode:
  SET_PIN PIN=fan0 VALUE=255
  PID_CALIBRATE HEATER=extruder TARGET=320
  SAVE_CONFIG
  SET_PIN PIN=fan0 VALUE=0

[gcode_macro TUNOFFINPUTSHAPER]
gcode:
  SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  RESUME_EXTERNAL_PROCESS
  RESUME_BASE {get_params}

[gcode_macro RESUME_EXTERNAL_PROCESS]
gcode:
  BOX_ERROR_RESUME_PROCESS
  RESUME_EXTERNAL

[gcode_macro RESUME_EXTERNAL]
gcode:
  {% if printer.pause_resume.resume_err is none or printer.pause_resume.resume_err|lower == 'false' %}
  RESTORE_E_CURRENT
  {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int != 0 %}
    {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int > printer.extruder.temperature %}
      M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
    {% else %}
      M104 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=hotend_temp VALUE=0
  {% endif %}
  {% if printer['gcode_macro PRINTER_PARAM'].fan2_speed > 0 %}
    SET_PIN PIN=fan2 VALUE={(printer['gcode_macro PRINTER_PARAM'].fan2_speed * 255 + 0.5)|int}
    {% set s_value = (printer['gcode_macro PRINTER_PARAM'].fan2_speed * 255 - printer['gcode_macro PRINTER_PARAM'].fan2_min) * 255 / (255 - printer['gcode_macro PRINTER_PARAM'].fan2_min)|float %}
    # M106 P2 S{s_value}    
  {% endif %}
  {% if printer['gcode_macro PRINTER_PARAM'].fan0_speed > 0 %}
    SET_PIN PIN=fan0 VALUE={(printer['gcode_macro PRINTER_PARAM'].fan0_speed * 255 + 0.5)|int}
    {% set s_value_0 = (printer['gcode_macro PRINTER_PARAM'].fan0_speed * 255 - printer['gcode_macro PRINTER_PARAM'].fan0_min) * 255 / (255 - printer['gcode_macro PRINTER_PARAM'].fan0_min)|float %}
    # M106 P2 S{s_value}    
  {% endif %}
  BOX_GO_TO_EXTRUDE_POS #暂停恢复前擦嘴 Rock_2024.03.26
  #BOX_NOZZLE_CLEAN  #暂停恢复前擦嘴 Rock_2024.03.26
  {% set z_resume_move = printer['gcode_macro PRINTER_PARAM'].z_safe_pause|int %}
  {% if z_resume_move > 2 %}
    {% set z_resume_move = z_resume_move - 2 %}
    G91
    G1 Z-{z_resume_move} F600
    M400
  {% endif %}
  {action_respond_info("z_resume_move = %s"% (z_resume_move))}
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float + 80.0 %}
  {% set E_VELOCITY = printer['filament_rack'].remain_material_velocity * 0.8 %}
  {action_respond_info("velocity: %s" % (E_VELOCITY))}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'false' %}
    {action_respond_info("Extruder not hot enough, SET M109 S%s" % 
      printer['gcode_macro PRINTER_PARAM'].hotend_temp|int)}
    M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
  {% else %}
    M104 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
  {% endif %}
  G91
  M106 S0
  G1 E{E} F{E_VELOCITY}
  G90
  M106 S127
  G4 P3000
  BOX_NOZZLE_CLEAN  #暂停恢复前擦嘴 Rock_2024.03.26
  M106 P2 S{s_value}
  M106 P0 S{s_value_0}
  SET_LIMITS
  M400
  SET_PIN PIN=extruder_fan VALUE=1
  {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  {action_respond_info("start END_PRINT")}
  END_PRINT
  {action_respond_info("end END_PRINT success")}
  CANCEL_PRINT_BASE
  {action_respond_info("CANCEL_PRINT success")}
  CLEAR_EEPROM_INFO

[gcode_macro MOTOR_CANCEL_PRINT]
gcode:
  Qmode_exit
  EXCLUDE_OBJECT_RESET
  PRINT_PREPARE_CLEAR
  M220 S100
  SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=5000
  TURN_OFF_HEATERS
  M107 P1
  M107 P2
  M141 S0
  SET_PIN PIN=extruder_fan VALUE=0
  BOX_SET_CURRENT_BOX_IDLE_MODE
  CANCEL_PRINT_BASE
  WAIT_TEMP_START

[gcode_macro G29] ;调平2024/03/24  在屏幕设置了温度后不生效，还是默认值 玉山确认
gcode:
  {% if 'PROBE_COUNT' in params|upper %}
    {% set get_count = ('PROBE_COUNT' + params.PROBE_COUNT) %}
  {%else %}
    {% set get_count = "" %}
  {% endif %}

  {% set bed_temp = printer.custom_macro.default_bed_temp %}
  {% set extruder_temp = printer.custom_macro.g28_ext_temp %}
  {% set nozzle_clear_temp = printer.custom_macro.default_extruder_temp %}

  {% if 'BED_TEMP' in params|upper and params.BED_TEMP|default(0)|int >= printer.custom_macro.default_bed_temp %}
    {% set bed_temp = params.BED_TEMP %}
  {% endif %}

  {% if 'EXTRUDER_TEMP' in params|upper %}
    {% set nozzle_clear_temp = params.EXTRUDER_TEMP %}
  {% endif %}
  {% set enabled = printer["filament_switch_sensor filament_sensor"].enabled %}
  {% if enabled %}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  {% endif %}
  M104 S{extruder_temp} #140  #需要跟源码结合
  M140 S{bed_temp}  #50
  {% if "xy" not in printer.toolhead.homed_axes %}
    G28 X Y
  {% endif %}
  # 此处Z归位一定要下降,此次光电找平后,不恢复上次做Z_TILT_ADJUST记录的adjustments值
  # 每次调平在上面的重新做Z_TILT_ADJUST,才能得到新的adjustments调整值
  # 设置标志位 ZDOWN的时候 不恢复上次做Z_TILT_ADJUST记录的adjustments值
  SET_G29_FLAG VALUE=1
  G28 Z
  BED_MESH_CLEAR
  NOZZLE_CLEAR
  M104 S{extruder_temp}
  M190 S{bed_temp}
  M109 S{extruder_temp}
  # 精擦嘴后做一次光电找平获取最大Z轴高度值
  ZDOWN_SWITCH ENABLE=1
  G28 Z
  BED_MESH_CLEAR
  Z_TILT_ADJUST
  NEXT_HOMEZ_NACCU
  G28 Z
  SET_G29_FLAG VALUE=0

  M204 S5000
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=5000
  BED_MESH_CALIBRATE {get_count}
  G1 Z175 F1200
  BOX_MOVE_TO_SAFE_POS#M1499
  CXSAVE_CONFIG
  TURN_OFF_HEATERS
  {% if enabled %}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  {% endif %}

[gcode_macro BED_MESH_CALIBRATE_START_PRINT] # 用于打印前的归位调平
gcode:
  {% if 'PROBE_COUNT' in params|upper %}
    {% set get_count = ('PROBE_COUNT' + params.PROBE_COUNT) %}
  {%else %}
    {% set get_count = "" %}
  {% endif %}

  {% if 'GCODE_FILE' in params|upper %}
    {% set get_gcode_file = ("GCODE_FILE='"+ params.GCODE_FILE + "'") %}
  {%else %}
    {% set get_gcode_file = "" %}
  {% endif %}
  {action_respond_info("get_gcode_file = %s" % (get_gcode_file))}

  {% set bed_temp = printer.custom_macro.default_bed_temp %}
  {% set extruder_temp = printer.custom_macro.g28_ext_temp %}
  {% set nozzle_clear_temp = printer.custom_macro.default_extruder_temp %}

  {% if 'BED_TEMP' in params|upper and params.BED_TEMP|default(0)|int >= printer.custom_macro.default_bed_temp %}
    {% set bed_temp = params.BED_TEMP %}
  {% endif %}

  {% if 'EXTRUDER_TEMP' in params|upper %}
    {% set nozzle_clear_temp = params.EXTRUDER_TEMP %}
  {% endif %}
  {% set enabled = printer["filament_switch_sensor filament_sensor"].enabled %}

  M106 S0  #需要关闭模型风扇
  M104 S{extruder_temp} # 140
  M140 S{bed_temp}  # 50

  {% if "z" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

  {% if enabled %}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  {% endif %}

  M104 S{extruder_temp}
  M190 S{bed_temp}
  M109 S{extruder_temp}

  {% if printer['gcode_macro START_PRINT'].prepare|int == 0 %}
    PRINT_PREPARED
    BED_MESH_CLEAR
    NOZZLE_CLEAR
    NEXT_HOMEZ_NACCU
    G28 Z
  {% endif %}

  M204 S5000
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=5000
  BED_MESH_CALIBRATE {get_count} {get_gcode_file}
  G0 Z10 F600
  CXSAVE_CONFIG
  {% if enabled %}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  {% endif %}
  
[gcode_macro cut_material]
gcode:
    G28
    G1 X223.8 Y353 F2400
    G1 X223.8 Y370.5 F6000
    NEW_CLEAR
   


# [gcode_macro G299]
# gcode:
#     BED_MESH_CLEAR
#     G28
#     PRTOUCH_READY
#     BED_MESH_CALIBRATE
#     BED_MESH_OUTPUT
[gcode_macro M1499] ;去到安全位置
gcode:
  G90
  M204 S5000
  G1 Y350 F12000 ;打印尺寸内Y预冲刷等候位置
  G1 X170 F12000 ;打印尺寸内X预冲刷等候位置
  G90
[gcode_macro M1500] ;去到冲刷等待位置
gcode:
  G90
  M204 S3000
  G1 Y200 F3600 ;打印尺寸内Y预冲刷等候位置
  G1 X178 F3600 ;打印尺寸内X预冲刷等候位置
  G1 Y350 F3600 ;打印尺寸内Y预冲刷等候位置
  G1 Y380 F3600#Y385 F3600
  G1 X132 F3600 ;冲刷等待位置
  G90
  
[gcode_macro M1501] ;喷嘴擦嘴
gcode:
  G90
  M204 S6000
  G1 X178 F12000 ;打印尺寸内x冲刷等候位置 
  G1 Y380 F12000 ;打印尺寸内Y预冲刷等候位置  
 
  G1 X135 F12000
  G1 X170 Y380 F12000
  {% for _ in range(5) %}
    G1 X132 Y380 F12000
    G1 X170 Y380 F12000
  {% endfor %}  
  G1 X178 Y380 F6000;打印尺寸内x冲刷等候位置  
  G1 X178 Y300 F6000;打印尺寸内x冲刷等候位置   
  G90
[gcode_macro M1502] ;单独切料动作
gcode:
  G90
  M204 S3000
  # G1 X200 F12000 ;打印尺寸内Y预冲刷等候位置
  G1 Y200 F12000 ;打印尺寸内Y预冲刷等候位置
  {% for _ in range(3) %}
    G1 X0   F12000 ;打印尺寸内Y预冲刷等候位置
    G1 X-7  F12000
  {% endfor %}
  G1 E-2 F180
  G92 E0
  G1 X10    F10000 ;打印尺寸内Y预冲刷等候位置
  G90
  # M204 S3000
  # G1 Y300 F10000 ;打印尺寸内Y预冲刷等候位置
  # G1 Y350 F10000 ;打印尺寸内Y预冲刷等候位置
  # G1 X222 F10000
  # G1 X222 Y382 F10000
  # G1 X222 Y350 F10000
  # G1 X222 Y382 F10000
  # G1 X222 Y350 F10000
  # G1 X222 Y382 F10000
  # G1 X222 Y350 F10000
  # G90
[gcode_macro M1800] 
gcode:
  M104 S220
  M109 S220
  G90
  G1 E100 F300  
  M1502
  G91
  G1 E-2 F180
  G92 E0
  G90
  # BOX_GO_TO_EXTRUDE_POS#M1500
  # #
  # M104 S220
  # M109 S220

  # G91
  # G1 E50 F300
  # G1 E-1 F180
  # SET_PIN PIN=fan0 VALUE=255
  # G4 P2000  
  # BOX_NOZZLE_CLEAN#M1501
  # SET_PIN PIN=fan0 VALUE=0 
  # BOX_CUT_MATERIAL#M1502
  # G90 
  # G1 Y300 F3600

[gcode_macro TEST_1800] ;盒子主从机重连
gcode:
  G28
  G1 Z50
  {% for _ in range(100) %}
    M1800
  {% endfor %}
  
[gcode_macro TEST_HOME]
gcode:
  {% for _ in range(100) %}
    G28
  {% endfor %} 
    
[gcode_macro A_TriPress_STEP1]
gcode:
  G28
  G1 Z25 F600

[gcode_macro A_TriPress_STEP2]
gcode:
  PROBE_ACCURACY PROBE_SPEED=5

[gcode_macro EXTRUDE_TEST]
gcode:
  M104 S220
  {% set times = params.TIMES|default(1)|int %}
  {% for _ in range(times) %}
    BOX_MOVE_TO_CUT
    BOX_GO_TO_EXTRUDE_POS
    G91
    G0 E100 F360
    G90
    M400
    # BOX_BLOW
    SET_PIN PIN=fan0 VALUE=255
    G4 P4000
    SET_PIN PIN=fan0 VALUE=0
    M400
    BOX_NOZZLE_CLEAN
    # BOX_GO_TO_EXTRUDE_POS
  {% endfor %}

[gcode_macro A_G28_test] ;归零与重复探测精度测试
gcode:
  {% set Count = params.G28_COUNT|default(3000)|int %}
  {% set RECount = params.COUNT|default(1000)|int %}

  M109 S140

  {% for _ in range(Count) %}
      G28
  {% endfor %}

  TEST_REPROBE C={RECount}

  M104 S0  


# [gcode_macro T0]
# rename_existing: T0.1
# gcode:
#   T0.1
#   {% set ai_switch = printer.load_ai.ai_switch %}
#   {% set ai_waste_switch = printer.load_ai.ai_waste_switch %}
#   {action_respond_info("ai_switch = %d, ai_waste_switch = %d \n" % (ai_switch, ai_waste_switch))}
#   {% if ai_waste_switch|int == 1 %} #AI检测开    
#     LOAD_AI_NOZZLE_CAM_POWER_ON  #进料前给喷头上电
#     BOX_GO_TO_EXTRUDE_POS 
#     M400
#     G91
#     G1 X-2 F12000
#     M400
#     G1 X9 F12000
#     M400
#     {action_respond_info("WILL LOAD_AI_DEAL")}
#     # LOAD_AI_DEAL
#     LOAD_AI_DETECT_WASTE #废料槽检测
#     LOAD_AI_NOZZLE_CAM_POWER_OFF #关灯
#     G1 X-7
#     M400
#     G90
#     BOX_NOZZLE_CLEAN # 擦嘴
#     BOX_MOVE_TO_SAFE_POS #去安全位置
#   {% endif %}

# [gcode_macro T1]
# rename_existing: T1.1
# gcode:
#   T1.1
#   {% set ai_switch = printer.load_ai.ai_switch %}
#   {% set ai_waste_switch = printer.load_ai.ai_waste_switch %}
#   {action_respond_info("ai_switch = %d, ai_waste_switch = %d \n" % (ai_switch, ai_waste_switch))}
#   {% if ai_waste_switch|int == 1 %} #AI检测开    
#     LOAD_AI_NOZZLE_CAM_POWER_ON  #进料前给喷头上电
#     BOX_GO_TO_EXTRUDE_POS 
#     M400
#     G91
#     G1 X-2 F12000
#     M400
#     G1 X9 F12000
#     M400
#     {action_respond_info("WILL LOAD_AI_DEAL")}
#     # LOAD_AI_DEAL
#     LOAD_AI_DETECT_WASTE #废料槽检测
#     LOAD_AI_NOZZLE_CAM_POWER_OFF #关灯
#     G1 X-7
#     M400
#     G90
#     BOX_NOZZLE_CLEAN # 擦嘴
#     BOX_MOVE_TO_SAFE_POS #去安全位置
#   {% endif %}

# [gcode_macro T2]
# rename_existing: T2.1
# gcode:
#   T2.1
#   {% set ai_switch = printer.load_ai.ai_switch %}
#   {% set ai_waste_switch = printer.load_ai.ai_waste_switch %}
#   {action_respond_info("ai_switch = %d, ai_waste_switch = %d \n" % (ai_switch, ai_waste_switch))}
#   {% if ai_waste_switch|int == 1 %} #AI检测开    
#     LOAD_AI_NOZZLE_CAM_POWER_ON  #进料前给喷头上电
#     BOX_GO_TO_EXTRUDE_POS 
#     M400
#     G91
#     G1 X-2 F12000
#     M400
#     G1 X9 F12000
#     M400
#     {action_respond_info("WILL LOAD_AI_DEAL")}
#     # LOAD_AI_DEAL
#     LOAD_AI_DETECT_WASTE #废料槽检测
#     LOAD_AI_NOZZLE_CAM_POWER_OFF #关灯
#     G1 X-7
#     M400
#     G90
#     BOX_NOZZLE_CLEAN # 擦嘴
#     BOX_MOVE_TO_SAFE_POS #去安全位置
#   {% endif %}

# [gcode_macro T3]
# rename_existing: T3.1
# gcode:
#   T3.1
#   {% set ai_switch = printer.load_ai.ai_switch %}
#   {% set ai_waste_switch = printer.load_ai.ai_waste_switch %}
#   {action_respond_info("ai_switch = %d, ai_waste_switch = %d \n" % (ai_switch, ai_waste_switch))}
#   {% if ai_waste_switch|int == 1 %} #AI检测开    
#     LOAD_AI_NOZZLE_CAM_POWER_ON  #进料前给喷头上电
#     BOX_GO_TO_EXTRUDE_POS 
#     M400
#     G91
#     G1 X-2 F12000
#     M400
#     G1 X9 F12000
#     M400
#     {action_respond_info("WILL LOAD_AI_DEAL")}
#     # LOAD_AI_DEAL
#     LOAD_AI_DETECT_WASTE #废料槽检测
#     LOAD_AI_NOZZLE_CAM_POWER_OFF #关灯
#     G1 X-7
#     M400
#     G90
#     BOX_NOZZLE_CLEAN # 擦嘴
#     BOX_MOVE_TO_SAFE_POS #去安全位置
#   {% endif %}
  
